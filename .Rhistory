?sample
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
ex1[1, ]
sample(1:ncol(mat), 1, replace = TRUE)
ncol_mat <- ncol(mat)
ncol_mat
vec_permutation(ex1[1, ], ncol_mat )
vec_permutation(ex1[1, ], ncol_mat )
for(i in 1:nrow(ex1)){
sample(1:ncol_mat, 1, replace = TRUE)
flag <- rbinom(1, 1, 0.5)
v <- vec_permutation(ex1[1, ], ncol_mat )
if(flag){
mat[i, ] <- v
} else{
mat[i, ] <- rev(v)
}
}
mat
mat <-  matrix(data = 0, nrow = nrow(ex1), ncol = ncol(ex1) )
ncol_mat <- ncol(mat)
for(i in 1:nrow(ex1)){
sample(1:ncol_mat, 1, replace = TRUE)
flag <- rbinom(1, 1, 0.5)
v <- vec_permutation(ex1[i, ], ncol_mat )
if(flag){
mat[i, ] <- v
} else{
mat[i, ] <- rev(v)
}
}
mat
v <- vec_permutation(ex1[i, ], ncol_mat )
ex1
sample_flag <- sample(1:ncol_mat, 1, replace = TRUE)
for(i in 1:nrow(ex1)){
sample_col <- sample(1:ncol_mat, 1, replace = TRUE)
flag <- rbinom(1, 1, 0.5)
v <- vec_permutation(ex1[i, ], sample_col )
if(flag){
mat[i, ] <- v
} else{
mat[i, ] <- rev(v)
}
}
mat
ex1
mat
ex1
mat
ex1
for(i in 1:nrow(ex1)){
sample_col <- sample(1:ncol_mat, 1, replace = TRUE)
flag <- rbinom(1, 1, 0.5)
v <- vec_permutation(ex1[i, ], sample_col )
if(flag){
mat[i, ] <- v
} else{
mat[i, ] <- rev(v)
}
}
mat
ex1
colnames(mat) <- colnames(ex1)
ex1
mat
rosario_sample(ex1)
rosario_sample(ex1)
document()
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
rosario_sample(ex1)
# rosario_model <- rosario(data)
data <- ex1
ide_no <- length(rosario_model)
int_no <- ncol(data)
obs_overlap <- as.data.frame(combinations(n = length(rownames(data)),
r = 2, v = rownames(data)))
obs_overlap$overlap_niche <- NA
for (i in 1:nrow(obs_overlap)) {
ind1 <- obs_overlap[i,1]
ind2 <- obs_overlap[i,2]
if (method == "pianka") {
obs_overlap[which(obs_overlap[,1] == ind1 & obs_overlap[,2] == ind2), 3] <- pianka_index(data[which(rownames(data) == ind1), ],
data[which(rownames(data) == ind2), ] )
}
if (method == "czekanowski") {
obs_overlap[which(obs_overlap[,1] == ind1 & obs_overlap[,2] == ind2), 3] <- czekanowski_index(data[which(rownames(data) == ind1),], data[which(rownames(data) == ind2),])
}
}
niche_overlap_comm <- mean(obs_overlap[,3])
colnames(obs_overlap)[1:2] <- c("identity1", "identity2")
niche_overlap_pseudo_assem <- c()
for (k in 1:nsim) {
pseudo_assem <- as.data.frame(matrix(NA, nrow = ide_no, ncol = int_no))
for (i in 1:ide_no) {
random1 <- sample(c(1:ide_no), size = ide_no, replace = TRUE)
random2 <- sample(c(1:int_no), size = ide_no, replace = TRUE)
random3 <- sample(c(1:2), size = ide_no, replace = TRUE)
pseudo_assem[i,] <- as.numeric(rosario_model[[random1[i]]][[random2[i]]][random3[i],])
}
null_overlap <- as.data.frame(combinations(n = length(rownames(pseudo_assem)),
r = 2, v = rownames(pseudo_assem)))
null_overlap$overlap_niche <- NA
for (i in 1:nrow(null_overlap)) {
ind1 <- null_overlap[i,1]
ind2 <- null_overlap[i,2]
if (method == "pianka") {
null_overlap[which(null_overlap[,1] == ind1 & null_overlap[,2] == ind2), 3] <- pianka_index(pseudo_assem[which(rownames(pseudo_assem) == ind1),], pseudo_assem[which(rownames(pseudo_assem) == ind2),])      }
if (method == "czekanowski") {
null_overlap[which(null_overlap[,1] == ind1 & null_overlap[,2] == ind2), 3] <- czekanowski_index(pseudo_assem[which(rownames(pseudo_assem) == ind1),], pseudo_assem[which(rownames(pseudo_assem) == ind2),])
}
}
niche_overlap_pseudo_assem[k] <- mean(null_overlap[,3])
}
nsim = 100
p_value <- t.test(x = niche_overlap_pseudo_assem, mu = niche_overlap_comm)
for (k in 1:nsim) {
pseudo_assem <- as.data.frame(matrix(NA, nrow = ide_no, ncol = int_no))
for (i in 1:ide_no) {
random1 <- sample(c(1:ide_no), size = ide_no, replace = TRUE)
random2 <- sample(c(1:int_no), size = ide_no, replace = TRUE)
random3 <- sample(c(1:2), size = ide_no, replace = TRUE)
pseudo_assem[i,] <- as.numeric(rosario_model[[random1[i]]][[random2[i]]][random3[i],])
}
null_overlap <- as.data.frame(combinations(n = length(rownames(pseudo_assem)),
r = 2, v = rownames(pseudo_assem)))
null_overlap$overlap_niche <- NA
for (i in 1:nrow(null_overlap)) {
ind1 <- null_overlap[i,1]
ind2 <- null_overlap[i,2]
if (method == "pianka") {
null_overlap[which(null_overlap[,1] == ind1 & null_overlap[,2] == ind2), 3] <- pianka_index(pseudo_assem[which(rownames(pseudo_assem) == ind1),], pseudo_assem[which(rownames(pseudo_assem) == ind2),])      }
if (method == "czekanowski") {
null_overlap[which(null_overlap[,1] == ind1 & null_overlap[,2] == ind2), 3] <- czekanowski_index(pseudo_assem[which(rownames(pseudo_assem) == ind1),], pseudo_assem[which(rownames(pseudo_assem) == ind2),])
}
}
niche_overlap_pseudo_assem[k] <- mean(null_overlap[,3])
}
method
mat <- ex1
niche_overlap_observed <- temp_overlap(mat, method)
niche_overlap_observed
purrr::rep_along(along = 1:10)
rosario_sample(mat)
rosario_sample(mat)
rosario_sample(mat)
temp_overlap(rosario_sample(mat), method)
purrr::rep_along(along = 1:10,  temp_overlap(rosario_sample(mat), method))
purrr::rep_along(along = 1:10,  temp_overlap(rosario_sample(mat), method))
purrr::map(1:10,
.f = temp_overlap(rosario_sample(mat), method))
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
purrr::map(1:10,
.f = temp_overlap(rosario_sample(mat), method) )
purrr::map_df(1:10,
.f = temp_overlap(rosario_sample(mat), method) )
purrr::map_dbl(1:10,
.f = temp_overlap(rosario_sample(mat), method) )
purrr::rep_along(1:10,
.f = temp_overlap(rosario_sample(mat), method) )
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
purrr::map(.x = 1:10,
f = temp_overlap(rosario_sample(mat), method) )
temp_overlap(rosario_sample(mat), method)
purrr::map(.x = 1:10,
.f = function(x) {temp_overlap(rosario_sample(mat), method)})
purrr::map_df(.x = 1:10,
.f = function(x) {temp_overlap(rosario_sample(mat), method)})
temp_overlap(rosario_sample(mat), method)}
purrr::map_df(.x = 1:10,
.f = function(x) {
df <- data.frame(temp_overlap(rosario_sample(mat), method))
df$iteration <- x
})
purrr::map(.x = 1:10,
.f = function(x) {
df <- data.frame(temp_overlap(rosario_sample(mat), method))
df$iteration <- x
})
purrr::map(.x = 1:10,
.f = function(x) {
df <- data.frame(temp_overlap(rosario_sample(mat), method))
df$iteration <- x
df
})
purrr::map_dfr(.x = 1:10,
.f = function(x) {
df <- data.frame(temp_overlap(rosario_sample(mat), method))
df$iteration <- x
df
})
purrr::map_df(.x = 1:10,
.f = function(x) {
df <- data.frame(temp_overlap(rosario_sample(mat), method))
df$iteration <- x
df
})
purrr::map_df(.x = 1:10,
.f = function(x) {
df <- data.frame(overlap <- temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
purrr::map_df(.x = 1:10,
.f = function(x) {
df <- data.frame(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
purrr::map_df(.x = 1:10,
.f = function(x) {
df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
purrr::map_df(.x = 1:1000,
.f = function(x) {
df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
purrr::map_df(.x = 1:1000,.f = get_index(x))
get_index <- function(x) {
df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
}
purrr::map_df(.x = 1:1000,.f = get_index(x))
purrr::map_df(.x = 1:1000,.f = get_index)
purrr::map_df(.x = 1:1000,.f = get_index)
get_index <-
purrr::map_df(.x = 1:1000,.f = function(x) {
df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
purrr::map_df(.x = 1:1000,.f = function(x) {
df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
df$method <- method
df$iteration <- x
df
})
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
replicate(temp_overlap(rosario_sample(mat), method))
replicate(n = 100, expr = temp_overlap(rosario_sample(mat), method))
library(mcreplicate)
install.packages("mcreplicate")
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
temp_overlap(rosario_sample(mat), method)
f <- temp_overlap(rosario_sample(mat), method)
f
f
f <- function() temp_overlap(rosario_sample(mat), method)
f()
f()
f()
replicate(n = 100, expr = f())
replicate(n = 100, expr = f())
replicate(n = 100, expr = f())
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mc_replicate
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(10, f())
f()
f()
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(10, f())
rosario::temp_overlap()
temp_overlap
rosario_sample
rosario::rosario_sample
mat
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(10, f())
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f())
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f(), varlist = c("mat"))
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f(), varlist = c("mat"))
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f(), varlist = c("f", "mat"))
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f(), varlist = c("f", "ex1"))
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f(), varlist = c("mat"))
# purrr::map_df(.x = 1:1000,.f = function(x) {
#   df <- tibble::tibble(overlap = temp_overlap(rosario_sample(mat), method))
#   df$method <- method
#   df$iteration <- x
#   df
# })
mcreplicate::mc_replicate(1000, f())
purrr::map(1:10, f())
purrr::map(1:10, f)
purrr::map(1:10, f() )
purrr::map(1:10, function(x) f() )
purrr::map(1:10, ]\(x) f() )
purrr::map(1:10, \(x) f() )
purrr::map(1:nsim, \(x) f() )
purrr::map_dbl(1:nsim, \(x) f(), .progress = TRUE )
purrr::map_df(1:nsim, \(x) f(), .progress = TRUE )
nsim = 100
niche_overlap_observed
res
results <- list(obs_overlap, niche_overlap_comm, p_value, niche_overlap_pseudo_assem)
use_package("purrr")
use_package("mcreplicate")
t.test
get_null_model <- function(mat, method, method, nsim = 100, parallel = TRUE) {
niche_overlap_observed <- temp_overlap(mat, method)
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
if(parallel){
res <- mcreplicate::mc_replicate(1000, f())
} else {
res <- purrr::map(1:nsim, \(x) f(), .progress = TRUE )
}
#p_value <- stats::t.test(x = res, mu = niche_overlap_observed)
#results <- list(obs_overlap, niche_overlap_comm, p_value, niche_overlap_pseudo_assem)
#names(results) <- c("niche_overlap_ide", "observed_niche_overlap", "p_value", "null_niche_overlap")
return(res)
}
temp_overlap(ex1, method = "pianka")
get_null_model(ex1, method = "pianka", nsim = 10)
document()
document()
get_null_model(ex1)
get_null_model(ex1, method = "pianka")
get_null_model(ex1, method = "pianka")
get_null_model(ex1, method = "pianka", nsim = 1000)
get_null_model(ex1, method = "pianka", nsim = 1000, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 1000, parallel = TRUE)
?mcreplicate::mc_replicate
multiprocess
multiprocess
plan
furrr::plan
plan
future::plan
future::plan(multiprocess)
multiprocess
?future::plan
multiprocess
get_null_model(ex1, method = "pianka", nsim = 1000, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = FALSE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = FALSE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
furrr_options
furrr::furrr_options
furrr::furrr_options(globals = TRUE)
furrr::furrr_options(globals = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
environment()
environment()
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
environment()
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = FALSE)
get_null_model(ex1, method = "pianka", nsim = 1000, parallel = FALSE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = FALSE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
future_options
furrr::future_options
furrr::future_options
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
furrr_options
furrr::furrr_options
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
?furrr::furrr_options
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
furrr_options()
furrr:::furrr_options()
furrr:::furrr_options(globals = TRUE)
#res <- mcreplicate::mc_replicate(1000, f())
future::plan(strategy = "multisession")
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
res <- furrr::future_map_dfr(1:nsim, \(x) f(), options = furrr::furrr_options(globals = TRUE))
res <- furrr::future_map_dfr(1:100, \(x) f(), options = furrr::furrr_options(globals = TRUE))
furrr::future_map_dfr(1:100, \(x) f())
furrr::future_map_dfr(1:100, \(x) f())
mat
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
f()
f()
furrr::future_map_dfr(1:100, \(x) f())
f()
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
res <- furrr::future_map_dfr(1:100, \(x) f())
f <- function() rosario::temp_overlap(rosario::rosario_sample(mat), method)
f()
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
?furrr::furrr_options
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
get_null_model(ex1, method = "pianka", nsim = 200, parallel = TRUE)
document()
rbinom
vec_permutation
m <- temp_overlap(ex(m)
m <- temp_overlap(ex1(m))
ex1(m)
ex1
temp_overlap(ex1)
get_null_model(ex1)
get_null_model(ex1, "pianka")
